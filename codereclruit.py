import streamlit as st
import pandas as pd
import random
import time

# ====================================================================
# 1. DATOS DEL QUIZ (Simulaci√≥n de datos alojados en GitHub)
#
# NOTA IMPORTANTE: Para alojar los datos en GitHub, guardar√≠as esta
# estructura en un archivo CSV o JSON y luego usar√≠as su URL RAW
# para cargarla. Ejemplo de c√≥mo cargar un CSV de GitHub:
# DATA_URL = "URL_RAW_DE_TU_ARCHIVO.csv"
# df = pd.read_csv(DATA_URL)
# ====================================================================

# Lista de las 10 preguntas generadas, adaptadas a una estructura de Python.
# 'question': La pregunta.
# 'options': Lista de las 4 opciones.
# 'correct_answer': La opci√≥n correcta.

QUIZ_DATA = [
    {
        "question": "¬øCu√°l es el documento esencial que se debe generar o actualizar antes de iniciar la b√∫squeda de candidatos, ya que detalla las funciones, responsabilidades y requisitos de la posici√≥n?",
        "options": ["El Organigrama de la empresa", "El Plan de Capacitaci√≥n Anual", "La Descripci√≥n y An√°lisis del Puesto", "El Contrato de Trabajo"],
        "correct_answer": "La Descripci√≥n y An√°lisis del Puesto"
    },
    {
        "question": "Elaborar el Perfil del Candidato Ideal a partir de la Descripci√≥n de Puesto se enfoca primordialmente en definir:",
        "options": ["El salario exacto que se ofrecer√° y el horario de trabajo", "Las Competencias, Habilidades, Conocimientos y Experiencia (CHKE) requeridas", "Una lista de preguntas para la entrevista", "La lista de posibles empresas competidoras"],
        "correct_answer": "Las Competencias, Habilidades, Conocimientos y Experiencia (CHKE) requeridas"
    },
    {
        "question": "¬øQu√© tipo de reclutamiento tiene la ventaja principal de ser generalmente m√°s r√°pido, m√°s econ√≥mico y aumentar la motivaci√≥n y lealtad del personal actual?",
        "options": ["Reclutamiento Externo", "Reclutamiento de Referidos", "Reclutamiento Masivo", "Reclutamiento Interno"],
        "correct_answer": "Reclutamiento Interno"
    },
    {
        "question": "El uso de redes sociales profesionales (como LinkedIn) y bolsas de trabajo digitales (Job Boards) para la publicaci√≥n de una vacante se clasifica como la fase de:",
        "options": ["An√°lisis de Puestos", "Selecci√≥n Interna", "Reclutamiento Externo", "Inducci√≥n y Onboarding"],
        "correct_answer": "Reclutamiento Externo"
    },
    {
        "question": "Una vez recibidas las solicitudes o curr√≠culums, ¬øcu√°l es el primer paso cr√≠tico en la fase de preselecci√≥n o cribado (screening)?",
        "options": ["La entrevista por el gerente de √°rea", "El cribado (filtrado) de Curr√≠culums Vitae (CVs) basado en los requisitos obligatorios del perfil", "La aplicaci√≥n de pruebas psicom√©tricas", "La verificaci√≥n de referencias laborales"],
        "correct_answer": "El cribado (filtrado) de Curr√≠culums Vitae (CVs) basado en los requisitos obligatorios del perfil"
    },
    {
        "question": "El principal objetivo de aplicar pruebas psicom√©tricas en la fase de selecci√≥n es:",
        "options": ["Medir el nivel de conocimientos t√©cnicos espec√≠ficos del puesto", "Evaluar la personalidad, el potencial y las aptitudes del candidato", "Determinar el monto salarial que el candidato espera", "Verificar la veracidad de los datos de su curr√≠culum"],
        "correct_answer": "Evaluar la personalidad, el potencial y las aptitudes del candidato"
    },
    {
        "question": "Una entrevista estructurada donde el entrevistador pide al candidato describir una Situaci√≥n, Tarea, Acci√≥n y Resultado (m√©todo STAR), busca evaluar principalmente:",
        "options": ["El coeficiente intelectual y las habilidades matem√°ticas del candidato", "Las Competencias conductuales o soft skills del candidato basadas en experiencias pasadas", "La capacidad del candidato para negociar su salario", "Sus conocimientos te√≥ricos sobre la industria"],
        "correct_answer": "Las Competencias conductuales o soft skills del candidato basadas en experiencias pasadas"
    },
    {
        "question": "¬øEn qu√© momento del proceso de reclutamiento y selecci√≥n es m√°s apropiado llevar a cabo la verificaci√≥n de referencias laborales de los candidatos?",
        "options": ["Antes de publicar la vacante, para validar el perfil", "Despu√©s de la(s) entrevista(s) principal(es) y antes de la oferta", "Durante la fase de reclutamiento externo masivo", "Despu√©s de que el candidato ha aceptado la oferta de trabajo"],
        "correct_answer": "Despu√©s de la(s) entrevista(s) principal(es) y antes de la oferta"
    },
    {
        "question": "¬øCu√°l es la funci√≥n principal del Reporte de Candidatos Finalistas que se entrega al gerente que tiene la vacante?",
        "options": ["Servir como borrador del contrato de trabajo del futuro empleado", "Sintetizar la evaluaci√≥n integral de los mejores candidatos para facilitar la decisi√≥n final", "Detallar el plan de capacitaci√≥n para el candidato elegido", "Justificar por qu√© se excedi√≥ el presupuesto de reclutamiento"],
        "correct_answer": "Sintetizar la evaluaci√≥n integral de los mejores candidatos para facilitar la decisi√≥n final"
    },
    {
        "question": "El indicador clave de rendimiento (KPI) llamado 'Tiempo Promedio para Cubrir la Vacante' (Time-to-Hire) mide la eficiencia de qu√© parte del proceso:",
        "options": ["La duraci√≥n de la fase de Inducci√≥n y Onboarding", "La diferencia salarial entre lo ofrecido y lo esperado por el candidato", "Desde la aprobaci√≥n de la vacante hasta que el candidato acepta la oferta (o inicia)", "La efectividad de la fuente de reclutamiento (referidos, job boards, etc.)"],
        "correct_answer": "Desde la aprobaci√≥n de la vacante hasta que el candidato acepta la oferta (o inicia)"
    }
]

# ====================================================================
# 2. CONFIGURACI√ìN Y FUNCIONES
# ====================================================================

# Inicializar el estado de la sesi√≥n si a√∫n no existe
if 'current_question_index' not in st.session_state:
    st.session_state.current_question_index = 0
    st.session_state.score = 0
    st.session_state.feedback = ""
    st.session_state.quiz_finished = False
    # Mezclamos las preguntas una sola vez al inicio
    st.session_state.quiz_data = QUIZ_DATA[:]
    random.shuffle(st.session_state.quiz_data)

def check_answer(user_answer, correct_answer):
    """Verifica la respuesta del usuario y actualiza el estado."""
    if st.session_state.quiz_finished:
        st.session_state.feedback = "El cuestionario ha finalizado. ¬°Revisa tu resultado!"
        return
        
    if user_answer == correct_answer:
        st.session_state.score += 1
        st.session_state.feedback = "¬°‚úÖ **Respuesta Correcta!** Pasando a la siguiente pregunta."
        
        # Avanzar al siguiente √≠ndice
        if st.session_state.current_question_index < len(st.session_state.quiz_data) - 1:
            st.session_state.current_question_index += 1
        else:
            st.session_state.quiz_finished = True
    else:
        # Aqu√≠ se da una retroalimentaci√≥n m√°s detallada (seg√∫n tu preferencia)
        st.session_state.feedback = f"‚ùå **Respuesta Incorrecta.** La respuesta correcta era: **{correct_answer}**. Int√©ntalo de nuevo."
        
    # La clave 'submitted' se usa para forzar la re-ejecuci√≥n y mostrar el feedback
    st.session_state.submitted = True

# ====================================================================
# 3. INTERFAZ DE STREAMLIT
# ====================================================================

st.set_page_config(
    page_title="Dashboard de Reclutamiento Interactivo",
    layout="centered"
)

st.title("üìö Quiz Interactivo: Proceso de Reclutamiento")
st.markdown("---")

if st.session_state.quiz_finished:
    # ------------------
    # Resultado Final
    # ------------------
    total_questions = len(st.session_state.quiz_data)
    score_percentage = (st.session_state.score / total_questions) * 100
    
    st.success("üéâ **¬°Cuestionario Terminado!** üéâ", icon="üèÜ")
    st.header(f"Tu Resultado Final:")
    st.balloons()
    
    col1, col2 = st.columns([1, 1])
    col1.metric("Respuestas Correctas", f"{st.session_state.score} / {total_questions}")
    col2.metric("Porcentaje de Acierto", f"{score_percentage:.1f}%")

    if st.button("Reiniciar Quiz"):
        # Reiniciar el estado de la sesi√≥n
        for key in st.session_state.keys():
            del st.session_state[key]
        st.rerun()

else:
    # ------------------
    # Pregunta Actual
    # ------------------
    
    current_index = st.session_state.current_question_index
    question_data = st.session_state.quiz_data[current_index]
    
    st.subheader(f"Pregunta {current_index + 1} de {len(st.session_state.quiz_data)}")
    st.markdown(f"**{question_data['question']}**")

    # Formulario para manejar la respuesta
    with st.form(key=f"q_form_{current_index}"):
        # Las opciones del quiz
        user_choice = st.radio(
            "Selecciona tu respuesta:",
            options=question_data["options"],
            key=f"q_radio_{current_index}"
        )
        
        submit_button = st.form_submit_button("Responder")
        
        if submit_button:
            # Llamar a la funci√≥n de verificaci√≥n
            check_answer(user_choice, question_data["correct_answer"])

    # ------------------
    # Feedback
    # ------------------
    if st.session_state.feedback:
        if "‚úÖ" in st.session_state.feedback:
            st.success(st.session_state.feedback)
            # Limpiar el feedback para la siguiente pregunta
            st.session_state.feedback = ""
            time.sleep(0.5)
            st.rerun() # Forzar el avance de la pregunta

        elif "‚ùå" in st.session_state.feedback:
            st.error(st.session_state.feedback)
            # Mantener el feedback hasta que se responda correctamente

    st.markdown("---")
    st.write(f"Puntaje actual: **{st.session_state.score}**")
